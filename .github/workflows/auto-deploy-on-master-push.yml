name: auto-deploy-on-master-push

on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
    branches: [ master ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: backend-portfolio

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: fcm service-account.json 생성
        env:
          ACTIONS_STEP_DEBUG: true
          SERVICE_ACCOUNT: ${{secrets.SERVICE_ACCOUNT}}
        run: echo "$SERVICE_ACCOUNT" >> src/main/resources/service_account.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      - name: Deploy to EC2 using SSM
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "echo \"${{ secrets.ENVIRONMENTS }}\" > /etc/environment",
                "echo \"DB_URL=jdbc:postgresql://${{ secrets.RDS_ENDPOINT }}/portfolio?useSSL=false\\&serverTimezone=Asia/Seoul\\&allowPublicKeyRetrieval=true\" >> /etc/environment",
                "echo \"DB_PASSWORD=${{ secrets.RDS_PASSWORD }}\" >> /etc/environment",
                "source /etc/environment",
                "docker stop portfolio-app || true",
                "docker rm portfolio-app || true",
                "aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
                "docker run -d --name portfolio-app -p 8080:8080 -e JAVA_OPTS=-Xmx256m --env-file /etc/environment -v /opt/ploggo/images:/opt/ploggo/images -v /opt/ploggo/badge-icons:/opt/ploggo/badge-icons '$REGISTRY'/'$ECR_REPOSITORY':'$GITHUB_SHA'",
                "docker image prune -f"
              ]
            }'
      - name: Create PostGIS Extension
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client

          export PGPASSWORD=${{ secrets.RDS_PASSWORD }}

          psql \
            -h ${{ secrets.RDS_ENDPOINT }} \
            -U ${{ secrets.RDS_USERNAME }} \
            -d ${{ secrets.RDS_DB_NAME }} \
            -c "CREATE EXTENSION IF NOT EXISTS postgis;"
